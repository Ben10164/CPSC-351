{"rule":"PHRASE_REPETITION","sentence":"^\\QSchematic of FSA (Finite State Automata)\nState Controller: The mechanism that causes the FSA to advance from state to state\nSchematic of PDA\nState Controller:\nThe state controller controlls the reading of the input (as before), but it also controls the stack\nThe stack: When we read things, we frequently push or pop things into or off the stack\nThe contents of the top of the stack and the item read will control whaere we move to\\E$"}
{"rule":"PHRASE_REPETITION","sentence":"^\\QSchematic of FSA (Finite State Automata)\nState Controller: The mechanism that causes the FSA to advance from state to state\nSchematic of PDA\nState Controller:\nThe state controller controls the reading of the input (as before), but it also controls the stack\nThe stack: When we read things, we frequently push or pop things into or off the stack\nThe contents of the top of the stack and the item read will control where we move to\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QGrammar \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q PDA PDA \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Grammar\\E$"}
{"rule":"EN_UNPAIRED_BRACKETS","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (the input symbol\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q the current stack top\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q the new stack top\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (you start where you start), \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (there is nothing on the stack at the beginning)\nfor \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we have \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q where \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for some \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (push)\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (pop) when performing the delta operation, and the notation has an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q in the design, it means that you have popped it\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (t are the other items on the stack)\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QS = aa bab baab\nx = aa\ny = bab\nz = babb\nYou visit q1 twice in this scheme\nq1 q3 q2 q1\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nso is \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe \"pump\"ing part is the bab's, in between the a and b\\E$"}
{"rule":"EN_UNPAIRED_BRACKETS","sentence":"^\\QThe \"pump\"ing part is the bab's, in between the a and b\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\Qa bab b\na bab bab b\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q$a^* b(a \\cup b)^* = R\\\\$ Build a DFA that accepts this language\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWhat is a formal language?\\E$"}
{"rule":"IF_IS","sentence":"^\\QThese expressions mean the same thing\nP implies Q\nP \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Q\nif P then Q\nQ only if P\nQ if P\\E$"}
{"rule":"IF_IS","sentence":"^\\QIFF (if an only if) \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nContradiction\nPmI\nConstruction\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qy = 0101\nx = 0\nz = 101\n(x is a prefix of y)\nLanguage: set of strings\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QLet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q be an FSA that accepts A\nLet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q be an FSA that accepts B\nConstruct \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q that recognizes \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is the set of states of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is the set of states of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is the same for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a set of tuples in which either element is an accept state of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"IF_IS","sentence":"^\\QIFF (if an only if) \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nContradiction\nPMI\nConstruction\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QGiven an abstract NFA, construct a DFA\nLet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q be an NFA\nSuch that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nUsing \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we will construct a DFA\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nSuch that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n5 Steps\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\npower set of Q\nFor \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nLet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for some \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nEvery transition in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q generates a set of transitions in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q contains an accept state pf \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nLambda transitions\nLet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nEX:\nImage Caption 16\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"A_INFINITIVE","sentence":"^\\QGiven an abstract NFA, construct a DFA\nLet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q be an NFA\nSuch that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nUsing \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we will construct a DFA\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nSuch that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n5 Steps\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\npower set of Q\nFor \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nLet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for some \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nEvery transition in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q generates a set of transitions in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q contains an accept state pf \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nLambda transitions\nLet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nEX:\nImage Caption 16\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"INCORRECT_POSSESSIVE_FORM_AFTER_A_NUMBER","sentence":"^\\QBuild 2 NFA's: N1, N2\nA=L(N1)\nB=L(N2)\nConstruct NFA N3\nUse N1 to recognize A\nUse N2 to recognize B\n\"Since this NFA recognizes the concatenation of two regular languages, then I will have proven that regular languages are closed under concatenation\"\\E$"}
